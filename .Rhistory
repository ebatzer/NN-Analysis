gamma = d_calc(as.vector(comm_p), q = qval, sample.weight = 1)
output = data.frame(alpha = alpha,
gamma = rep(gamma, length(alpha)),
beta = gamma / alpha)
names(output) = paste0(names(output), paste("_q", qval, sep = ""), sep = "")
return(output)
}
temp_div = right_join(cover.wide, enoughcoverage) %>%
select(-count, -year_trt) %>%
group_by(site_code, block, plot) %>%
do(cbind(year = .$year,
calc_div(.[,-c(1:4)], qval = 0),
calc_div(.[,-c(1:4)], qval = 1),
calc_div(.[,-c(1:4)], qval = 2)))
write.csv("../Data/diversity_temporal_full.csv",
x = temp_div)
p1 = temp_div %>%
ggplot(aes(x = alpha_q0)) +
geom_histogram() +
ggtitle("Temporal alpha (plot) diversity")
p2 = temp_div %>%
ggplot(aes(x = beta_q0)) +
geom_histogram() +
ggtitle("Temporal beta (plot \ block) diversity")
p3 = temp_div %>%
ggplot(aes(x = gamma_q0)) +
geom_histogram() +
ggtitle("Temporal gamma (block) diversity")
grid.arrange(p1, p2, p3, nrow = 1)
df1 = temp_div %>% rename("temp_alpha" = alpha_q0,
"temp_beta" = beta_q0,
"temp_gamma" = gamma_q0)
df2 = spat_div %>% rename("spat_alpha" = alpha_q0,
"spat_beta" = beta_q0,
"spat_gamma" = gamma_q0)
full_join(df1, df2) %>%
group_by(site_code, block) %>%
summarise(t_beta = mean(na.omit(temp_beta)),
s_beta = mean(na.omit(spat_beta))) %>%
ggplot(aes(y = t_beta,
x = s_beta,
color = site_code)) +
geom_point(alpha = .4) +
guides(color = FALSE) +
stat_smooth(aes(color = FALSE), method = "lm", se = FALSE) +
geom_line(stat = "smooth",
method = "lm", se = FALSE, alpha = .2) +
ylim(1,4) +
xlim(1.5, 4.5) +
ggtitle("Spatial vs. Temporal Beta Diversity Relationship") +
xlab("Spatial Beta Diversity") +
ylab("Temporal Beta Diversity")
st_summary = full_join(df1, df2) %>%
group_by(site_code, block) %>%
summarise(t_beta = mean(na.omit(temp_beta)),
s_beta = mean(na.omit(spat_beta)))
library(lmerTest)
summary(lmer(t_beta ~ s_beta + (1|site_code), data = st_summary, REML = FALSE))
summary(lm(t_beta ~ s_beta, data = st_summary))
df1 = temp_div %>% rename("temp_alpha" = alpha_q1,
"temp_beta" = beta_q1,
"temp_gamma" = gamma_q1)
df2 = spat_div %>% rename("spat_alpha" = alpha_q1,
"spat_beta" = beta_q1,
"spat_gamma" = gamma_q1)
full_join(df1, df2) %>%
group_by(site_code, block) %>%
summarise(t_beta = mean(na.omit(temp_beta)),
s_beta = mean(na.omit(spat_beta))) %>%
ggplot(aes(y = t_beta,
x = s_beta,
color = site_code)) +
geom_point(alpha = .4) +
guides(color = FALSE) +
stat_smooth(aes(color = FALSE), method = "lm") +
geom_line(stat = "smooth",
method = "lm", se = FALSE, alpha = .2) +
ylim(1,2.5)
df1 = temp_div %>% rename("temp_alpha" = alpha_q2,
"temp_beta" = beta_q2,
"temp_gamma" = gamma_q2)
df2 = spat_div %>% rename("spat_alpha" = alpha_q2,
"spat_beta" = beta_q2,
"spat_gamma" = gamma_q2)
full_join(df1, df2) %>%
group_by(site_code, block) %>%
summarise(t_beta = mean(na.omit(temp_beta)),
s_beta = mean(na.omit(spat_beta))) %>%
ggplot(aes(y = t_beta,
x = s_beta,
color = site_code)) +
geom_point(alpha = .4) +
guides(color = FALSE) +
stat_smooth(aes(color = FALSE), method = "lm") +
geom_line(stat = "smooth",
method = "lm", se = FALSE, alpha = .2) +
ylim(1,2.5)
com_spatial
unique(com_spatial$site_name)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.width = 8.5, fig.height = 5)
# Loading necessary packages
library(ggplot2) # Figure plotting
library(tidyverse) # Data manipulation
library(lme4) # Linear mixed effects models
library(vegan) # General ecology functions
library(data.table) # Fast reading of data tables
library(testthat) # Unit testing
library(dtplyr) # Data.table dplyr functions
library(JostDiv) # Exponentiated diversity indices (Hill Numbers)
library(gridExtra) # Multiple GGplots
library(corrplot) # Correlation plots
# Plot descriptions
plot.descriptions <- read.csv("../data/comb-by-plot-clim-soil-diversity-21-Feb-2019.csv",
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
# Soil data
soil.chars <- read.csv("../data/soil-nutrients-21-February-2019.csv",
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
# Annual climate data
climate <- read.csv(file = "../Data/Weather_annual_20190510.csv")
# Loading in dataset (Updated to Feb 22st 2019)
cover <- fread('../Data/full-cover-22-February-2019.csv',
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
# Spatial Diversity
spatdiv = read.csv("../Data/diversity_spatial_full.csv")
tempdiv = read.csv("../Data/diversity_temporal_full.csv")
# Defining % Annual Taxa
ann_cov <- cover %>%
filter(year_trt == 0 & live == 1) %>%
group_by(site_code) %>%
summarise(total_cover = sum(max_cover),
ann_cover = sum(max_cover[local_lifespan == "ANNUAL"])) %>%
mutate(ann_frac = ann_cover / total_cover) %>%
replace_na(list(ann_frac = 0))
# General site characteristics
site_summary <- plot.descriptions %>%
filter(year_trt == 0) %>%
select(site_code, elevation, managed, burned, grazed, anthropogenic, latitude, MAP_v2, MAT_v2) %>%
distinct()
# Joining together
site_summary = site_summary %>% inner_join(ann_cov %>% select(site_code, ann_frac))
# Plotting correlations
sitecor = cor(site_summary %>% select(-site_code) %>% na.omit())
corrplot(sitecor, method="circle")
# VIF Values
diag(solve(sitecor))
# Subsetting species matrix by these site codes
soil.chars = soil.chars %>%
filter(year_trt == 0) %>%
mutate(block = as.factor(block),
plot = as.factor(plot))
# Selecting parameters of interest
soil.stdized = soil.chars %>%
select(site_code, block, pct_N, pct_C, ppm_P, ppm_K) %>%
na.omit() %>%
group_by(site_code, block) %>%
summarise(mean_N = mean(pct_N),
mean_C = mean(pct_C),
mean_P = mean(ppm_P),
mean_K = mean(ppm_K),
sd_N = sd(pct_N),
sd_C = sd(pct_C),
sd_P = sd(ppm_P),
sd_K = sd(ppm_K)) %>%
mutate(cv_N = sd_N / mean_N,
cv_C = sd_C / mean_C,
cv_P = sd_P / mean_P,
cv_K = sd_K / mean_K) %>%
mutate_if(is.numeric, log) %>%
filter_all(any_vars(is.finite(.))) %>%
ungroup()
soil.stdized %>%
select(-block) %>%
gather(key = "var", value = "val", -site_code) %>%
ggplot(aes(x = val)) +
geom_histogram() +
facet_wrap(~var, scales = "free")
soil.stdized <- soil.stdized[!is.infinite(rowSums(soil.stdized %>% select(-site_code, -block))),]
soilcor = cor(soil.stdized %>% na.omit() %>% select(cv_N, cv_P, cv_C, cv_K,
mean_N, mean_P, mean_C, mean_K))
corrplot(soilcor, method="circle")
diag(solve(soilcor))
climate_summary = climate %>%
filter(year < 2019 &
ppt > 0 &
pet > 0) %>%
group_by(site_code) %>%
summarize(mean_PPT = mean(ppt),
mean_PET = mean(pet),
sd_PPT = sd(ppt),
sd_PET = sd(pet)) %>%
mutate(cv_PPT = sd_PPT / mean_PPT,
cv_PET = sd_PET / mean_PET)
climcor = cor(climate_summary %>% select(mean_PPT, mean_PET, cv_PPT, cv_PET))
corrplot(climcor, method="circle")
diag(solve(climcor))
full_table = inner_join(site_summary, soil.stdized %>% group_by(site_code) %>% summarise_if(is.numeric, mean)) %>%
left_join(climate_summary) %>%
select(-contains("sd"))
fullcor = cor(full_table %>% select(-site_code, -mean_PPT, -mean_PET, -cv_PPT, -cv_PET, -mean_C, -cv_C) %>% na.omit())
corrplot(fullcor, type = "upper")
sort(diag(solve(fullcor)))
# Function to calculate network-wide site z-scores
calc_zscores <- function(x){(x - mean(na.omit(x))) / sd(na.omit(x))}
# Z-scoring variation
soil.zscores = soil.stdized %>%
mutate_if(is.numeric, calc_zscores)
full_table = full_table %>%
mutate(managed = as.factor(managed),
burned = as.factor(burned),
grazed = as.factor(grazed),
anthropogenic = as.factor(anthropogenic))
spatial_model = spatdiv %>% group_by(site_code, block) %>%
#summarise(alpha = mean(alpha),
#          beta = mean(beta)) %>%
left_join(full_table  %>%
select(-mean_PPT, -mean_PET, -cv_PPT, -cv_PET, -mean_C, -cv_C) %>%
mutate_if(is.numeric, calc_zscores))
temporal_model = tempdiv %>% group_by(site_code, block) %>%
#summarise(alpha = mean(alpha),
#          beta = mean(beta)) %>%
left_join(full_table  %>%
select(-mean_PPT, -mean_PET, -cv_PPT, -cv_PET, -mean_C, -cv_C) %>%
mutate_if(is.numeric, calc_zscores))
library(lmerTest)
mod_alpha = lmer(scale(alpha_q0) ~ ann_frac + mean_N + mean_P + mean_K + MAT_v2 + MAP_v2 + (1|site_code/block), data = spatial_model)
mod_beta_spatial = lmer(scale(beta_q0) ~ ann_frac + mean_N + mean_P + mean_K + MAT_v2 + MAP_v2 + (1|site_code/block), data = spatial_model)
mod_beta_temporal = lmer(scale(beta_q0) ~ ann_frac + mean_N + mean_P + mean_K + MAT_v2 + MAP_v2 + (1|site_code), data = temporal_model)
anova(mod_alpha)
library(sjPlot)
# draw a dot-and-whisker plot
p1 = plot_model(mod_alpha) +
ggtitle("Plot Richness")
p2 = plot_model(mod_beta_spatial)+
ggtitle("Spatial Turnover") +
p3 = plot_model(mod_beta_temporal)+
ggtitle("Temporal Turnover")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.width = 8.5, fig.height = 5)
# Loading necessary packages
library(ggplot2) # Figure plotting
library(tidyverse) # Data manipulation
library(lme4) # Linear mixed effects models
library(vegan) # General ecology functions
library(data.table) # Fast reading of data tables
library(testthat) # Unit testing
library(dtplyr) # Data.table dplyr functions
library(JostDiv) # Exponentiated diversity indices (Hill Numbers)
library(gridExtra) # Multiple GGplots
library(corrplot) # Correlation plots
# Plot descriptions
plot.descriptions <- read.csv("../data/comb-by-plot-clim-soil-diversity-21-Feb-2019.csv",
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
# Soil data
soil.chars <- read.csv("../data/soil-nutrients-21-February-2019.csv",
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
# Annual climate data
climate <- read.csv(file = "../Data/Weather_annual_20190510.csv")
# Loading in dataset (Updated to Feb 22st 2019)
cover <- fread('../Data/full-cover-22-February-2019.csv',
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
# Spatial Diversity
spatdiv = read.csv("../Data/diversity_spatial_full.csv")
tempdiv = read.csv("../Data/diversity_temporal_full.csv")
# Defining % Annual Taxa
ann_cov <- cover %>%
filter(year_trt == 0 & live == 1) %>%
group_by(site_code) %>%
summarise(total_cover = sum(max_cover),
ann_cover = sum(max_cover[local_lifespan == "ANNUAL"])) %>%
mutate(ann_frac = ann_cover / total_cover) %>%
replace_na(list(ann_frac = 0))
# General site characteristics
site_summary <- plot.descriptions %>%
filter(year_trt == 0) %>%
select(site_code, elevation, managed, burned, grazed, anthropogenic, latitude, MAP_v2, MAT_v2) %>%
distinct()
# Joining together
site_summary = site_summary %>% inner_join(ann_cov %>% select(site_code, ann_frac))
# Plotting correlations
sitecor = cor(site_summary %>% select(-site_code) %>% na.omit())
corrplot(sitecor, method="circle")
# VIF Values
diag(solve(sitecor))
# Subsetting species matrix by these site codes
soil.chars = soil.chars %>%
filter(year_trt == 0) %>%
mutate(block = as.factor(block),
plot = as.factor(plot))
# Selecting parameters of interest
soil.stdized = soil.chars %>%
select(site_code, block, pct_N, pct_C, ppm_P, ppm_K) %>%
na.omit() %>%
group_by(site_code, block) %>%
summarise(mean_N = mean(pct_N),
mean_C = mean(pct_C),
mean_P = mean(ppm_P),
mean_K = mean(ppm_K),
sd_N = sd(pct_N),
sd_C = sd(pct_C),
sd_P = sd(ppm_P),
sd_K = sd(ppm_K)) %>%
mutate(cv_N = sd_N / mean_N,
cv_C = sd_C / mean_C,
cv_P = sd_P / mean_P,
cv_K = sd_K / mean_K) %>%
mutate_if(is.numeric, log) %>%
filter_all(any_vars(is.finite(.))) %>%
ungroup()
soil.stdized %>%
select(-block) %>%
gather(key = "var", value = "val", -site_code) %>%
ggplot(aes(x = val)) +
geom_histogram() +
facet_wrap(~var, scales = "free")
soil.stdized <- soil.stdized[!is.infinite(rowSums(soil.stdized %>% select(-site_code, -block))),]
soilcor = cor(soil.stdized %>% na.omit() %>% select(cv_N, cv_P, cv_C, cv_K,
mean_N, mean_P, mean_C, mean_K))
corrplot(soilcor, method="circle")
diag(solve(soilcor))
climate_summary = climate %>%
filter(year < 2019 &
ppt > 0 &
pet > 0) %>%
group_by(site_code) %>%
summarize(mean_PPT = mean(ppt),
mean_PET = mean(pet),
sd_PPT = sd(ppt),
sd_PET = sd(pet)) %>%
mutate(cv_PPT = sd_PPT / mean_PPT,
cv_PET = sd_PET / mean_PET)
climcor = cor(climate_summary %>% select(mean_PPT, mean_PET, cv_PPT, cv_PET))
corrplot(climcor, method="circle")
diag(solve(climcor))
full_table = inner_join(site_summary, soil.stdized %>% group_by(site_code) %>% summarise_if(is.numeric, mean)) %>%
left_join(climate_summary) %>%
select(-contains("sd"))
fullcor = cor(full_table %>% select(-site_code, -mean_PPT, -mean_PET, -cv_PPT, -cv_PET, -mean_C, -cv_C) %>% na.omit())
corrplot(fullcor, type = "upper")
sort(diag(solve(fullcor)))
# Function to calculate network-wide site z-scores
calc_zscores <- function(x){(x - mean(na.omit(x))) / sd(na.omit(x))}
# Z-scoring variation
soil.zscores = soil.stdized %>%
mutate_if(is.numeric, calc_zscores)
full_table = full_table %>%
mutate(managed = as.factor(managed),
burned = as.factor(burned),
grazed = as.factor(grazed),
anthropogenic = as.factor(anthropogenic))
spatial_model = spatdiv %>% group_by(site_code, block) %>%
#summarise(alpha = mean(alpha),
#          beta = mean(beta)) %>%
left_join(full_table  %>%
select(-mean_PPT, -mean_PET, -cv_PPT, -cv_PET, -mean_C, -cv_C) %>%
mutate_if(is.numeric, calc_zscores))
temporal_model = tempdiv %>% group_by(site_code, block) %>%
#summarise(alpha = mean(alpha),
#          beta = mean(beta)) %>%
left_join(full_table  %>%
select(-mean_PPT, -mean_PET, -cv_PPT, -cv_PET, -mean_C, -cv_C) %>%
mutate_if(is.numeric, calc_zscores))
library(lmerTest)
mod_alpha = lmer(scale(alpha_q0) ~ ann_frac + mean_N + mean_P + mean_K + MAT_v2 + MAP_v2 + (1|site_code/block), data = spatial_model)
mod_beta_spatial = lmer(scale(beta_q0) ~ ann_frac + mean_N + mean_P + mean_K + MAT_v2 + MAP_v2 + (1|site_code/block), data = spatial_model)
mod_beta_temporal = lmer(scale(beta_q0) ~ ann_frac + mean_N + mean_P + mean_K + MAT_v2 + MAP_v2 + (1|site_code), data = temporal_model)
anova(mod_alpha)
library(sjPlot)
# draw a dot-and-whisker plot
p1 = plot_model(mod_alpha) +
ggtitle("Plot Richness")
p2 = plot_model(mod_beta_spatial) +
ggtitle("Spatial Turnover")
p3 = plot_model(mod_beta_temporal) +
ggtitle("Temporal Turnover")
grid.arrange(p1,p2,p3, nrow = 1)
str(p2)
bind_rows(p1$data,
p2$data,
p3$data) %>%
mutate(lev = c(rep("Plot Richness", 6), rep("Spatial Turnover", 6), rep("Temporal Turnover", 6)),
alpha_val = as.numeric(if_else(p.value < 0.05, 1, .3))) %>%
ggplot(aes(x = estimate,
y = term,
color = estimate > 0,
fill = estimate > 0,
alpha = I(alpha_val))) +
geom_vline(xintercept = 0) +
geom_segment(aes(x = conf.low,
xend = conf.high,
y = term,
yend = term),
size = 1) +
geom_point(size = 5, pch = 21, color = "black") +
facet_wrap(~lev) +
theme_bw() +
xlab("Standardized Coefficient Estimate") +
ylab("Coefficient Name") +
guides(color = FALSE,
fill = FALSE) +
ggtitle("Model Coefficient Effects")
ggsave("../Figures/model_coefficients.pdf", height = 4, width = 7)
meandisp = function(x, cols){return(mean(dist(data.frame(x)[,cols])))}
blockdisp = soil.chars %>%
select(site_code, block, pct_N, pct_C, ppm_P, ppm_K) %>%
na.omit() %>%
group_by(site_code, block) %>%
mutate_if(is.numeric, scale)%>%
do(data.frame(meandisp(., c(2:5))))
blocksupp = soil.chars %>%
select(site_code, block, pct_N, pct_C, ppm_P, ppm_K) %>%
na.omit() %>%
mutate_if(is.numeric, scale) %>%
mutate(tot = sqrt(pct_N^2 + pct_C^2 + ppm_P^2 + ppm_K^2)) %>%
group_by(site_code, block) %>%
summarise(totsupply = mean(tot))
left_join(blockdisp, blocksupp)
# Subsetting species matrix by these site codes
soil.chars = soil.chars %>%
filter(year_trt == 0) %>%
mutate(block = as.factor(block),
plot = as.factor(plot))
# Selecting parameters of interest
soil.stdized = soil.chars %>%
select(site_code, block, plot, pct_N, pct_C, ppm_P, ppm_K) %>%
na.omit() %>%
mutate_if(is.numeric, log)
# Function to calculate network-wide site z-scores
calc_zscores <- function(x){(x - mean(na.omit(x))) / sd(na.omit(x))}
# Z-scoring variation
soil.zscores = soil.stdized %>%
mutate_if(is.numeric, calc_zscores)
p1 = soil.zscores %>% ggplot(aes(x = pct_N)) +
geom_histogram(color = "black", fill = "lightblue") +
xlim(0, 1)+
ggtitle("Plot Soil %N")
p2 =  soil.zscores %>% ggplot(aes(x = ppm_P)) +
geom_histogram(color = "black", fill = "lightgreen") +
ggtitle("Plot Soil ppm P")
p3 = soil.zscores %>% ggplot(aes(x = ppm_K)) +
geom_histogram(color = "black", fill = "pink") +
ggtitle("Plot Soil ppm K")
p4 = soil.zscores %>% ggplot(aes(x = pct_C)) +
geom_histogram(color = "black", fill = "orange") +
ggtitle("Plot Soil pct C")
gridExtra::grid.arrange(p1, p2, p3, p4, nrow = 2)
climate = climate %>%
filter(year < 2019 &
ppt > 0 &
pet > 0) %>%
mutate(pet.z = calc_zscores(log(pet)),
ppt.z = calc_zscores(log(ppt)))
p1 <- climate %>%
ggplot(aes(x = ppt.z)) +
geom_histogram(color = "black", fill = "lightblue") +
ggtitle("Site Log(PPT)")
p2 <- climate %>%
ggplot(aes(x = pet.z)) +
geom_histogram(color = "black", fill = "lightgreen") +
ggtitle("Site Log(PET)")
p3 <- climate %>%
ggplot(aes(x = ppt - pet)) +
geom_histogram(color = "black", fill = "pink") +
ggtitle("Site PPT - PET")
p4 <- climate %>%
ggplot(aes(x = ppt.z - pet.z)) +
geom_histogram(color = "black", fill = "orange") +
ggtitle("Site Log(PPT) - Log(PET)")
gridExtra::grid.arrange(p1, p2, p3, p4, nrow = 2)
spatial_table = left_join(spatdiv, soil.zscores %>% mutate(block = as.numeric(block),
plot = as.numeric(plot)),
by = c("site_code", "block", "plot")) %>%
left_join(plot.descriptions %>%
group_by(site_code) %>%
summarise_at(c("RAIN_PET", "MAT_v2", "TEMP_VAR_v2", "MAP_v2"), mean))
depvar_plot = function(obsvar, predvar, mydf){
plot = ggplot(aes_string(x = obsvar,
y = predvar,
color = "site_code"),
data = mydf) +
geom_point(alpha = .2) +
geom_line(stat = "smooth", method = "lm") +
geom_line(stat = "smooth", method = "lm", aes(color = FALSE), color = "black", size = 2) +
guides(color = FALSE)
return(plot)
}
p1 = depvar_plot("pct_N", "alpha", spatial_table)
p2 = depvar_plot("pct_C", "alpha", spatial_table)
p3 = depvar_plot("ppm_P", "alpha", spatial_table)
p4 = depvar_plot("ppm_K", "alpha", spatial_table)
p5 = depvar_plot("TEMP_VAR_v2", "alpha", spatial_table)
p6 = depvar_plot("RAIN_PET", "alpha", spatial_table)
p7 = depvar_plot("MAT_v2", "alpha", spatial_table)
p8 = depvar_plot("MAP_v2", "alpha", spatial_table)
gridExtra::grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8,
nrow = 2)
spatial_model
unique(spatial_model$site_code)
spatial_model
unique(na.omit(spatial_model)$site_code)
unique(na.omit(temporal_model)$site_code)
unique(na.omit(spatial_model)$site_code)
unique(na.omit(temporal_model)$site_code) $
unique(na.omit(temporal_model)$site_code) #
unique(na.omit(temporal_model)$site_code) #
unique(na.omit(temporal_model)$site_code) %in% unique(na.omit(spatial_model)$site_code)
