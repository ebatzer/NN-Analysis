cover.long <- cover.long[!(Taxon %in% unwanted.sps | local_lifeform == 'MOSS' | functional_group == 'BRYOPHYTE')]
cover.long[functional_group=='GRAMINOID', functional_group := 'GRASS']
rm(sps,unwanted.sps)
rm(sps,unwanted.sps)
#Choose plots with at least 3 years of data
## This takes care of a few sites that have strange plot configurations,
## like sgs.us
site.plots.keep <- cover.long %>%
group_by(site_code,block,plot,trt) %>%
summarise(yrs.data = length(unique(year))) %>%
filter(yrs.data>= 5)
## Some sites have multiple control plots in a block.
## Choosing only the lowest numbered plot belong to a treatment in each block.
site.plots.keep <- left_join(site.plots.keep,
site.plots.keep %>% group_by(site_code,block,trt) %>%
summarize(min.plot = min(plot))) %>%
filter(plot==min.plot) %>%
select(-min.plot,-yrs.data)
cover.long <- left_join(site.plots.keep,cover.long)
cover.long <- droplevels(cover.long) #cover.long$site_code <- factor(cover.long$site_code)
rm(site.plots.keep)
# cast long into wide
cover.wide <- dcast(cover.long,site_code+year+block+plot+trt+year_trt ~ Taxon,
value.var='max_cover',
fun.aggregate = sum,drop=T,fill=0)
# Adding in additional info
siteinfo <- biomass_data[site_code %in% sites.long,
.(`site_code`,`site_name`,`continent`,`region`,
`first_nutrient_year`,`site_richness`)] %>%
distinct()
spsinfo <- select(data.frame(cover.long),site_code,Family:ps_path,-live) %>% distinct()
cols <- c(colnames(cover.wide)[-c(1:6)])
cover.wide[ , (cols) := lapply(.SD, "as.numeric"), .SDcols = cols]
attr.mat = cover.wide[,1:6]
cover.vals = data.frame(cover.wide[,-c(1:6)])
# Should we normalize?
# cover.mat = round(vegan::decostand(cover.vals, method = "total"), 3)
cover.mat = cover.vals
attr.mat = dummy_columns(attr.mat, select_columns = "trt",
remove_first_dummy = TRUE) %>%
replace_na(list(trt_K = 0, trt_N = 0, trt_P = 0)) %>%
mutate(trt_K_num = as.numeric(trt_K * year_trt),
trt_P_num = as.numeric(trt_P * year_trt),
trt_N_num = as.numeric(trt_N * year_trt),
year_trt = as.numeric(year_trt))
attr.mat$trt_K[attr.mat$year_trt == 0] = 0
attr.mat$trt_P[attr.mat$year_trt == 0] = 0
attr.mat$trt_N[attr.mat$year_trt == 0] = 0
# write.csv(x = bind_cols(attr.mat, cover.mat),
#           file = "../data/compmat_edited.csv")
# For all unique sites selected
panov <- function(x, cover.mat, attr.mat){
# Subset to a single site
com.subset <- data.frame(cover.mat)[attr.mat$site_code == x,]
# Remove all zero columns
com.subset = com.subset[,colSums(com.subset) > 0]
# Pull out relevant plot attributes for each site
attr.subset <- data.frame(attr.mat) %>% filter(site_code == x)
# Check that these two matrices are the same size
expect_true(nrow(attr.subset) == nrow(com.subset))
mod_anov <- adonis(com.subset ~ as.factor(year_trt) + trt_K_num + trt_P_num + trt_N_num,
data = attr.subset,
se = FALSE, method = "euclidean",
strata = attr.subset$block,
by = "margin",
permutations = 9999)
# Saving ouput
output = list(siteinfo = attr.subset,
aovtable = mod_anov$aov.tab,
sitescores = mod_anov$coef.sites,
specscores = mod_anov$coefficients)
}
sitenames = as.character(unique(attr.mat$site_code))
output = lapply(X = sitenames, FUN = panov, cover.mat = cover.mat, attr.mat = attr.mat)
storagelist <- list()
for(i in 1:length(output)){
anovatab = bind_cols(site = as.character(unique(output[[i]]$siteinfo$site_code)),
data.frame(matrix(output[[i]]$aovtable$`Pr(>F)`, nrow = 1)))
colnames(anovatab)[2:ncol(anovatab)] =   rownames(output[[i]]$aovtable)
storagelist[[i]] = anovatab
}
write.csv(x = bind_rows(storagelist),
"../Data/composition_pvalues.csv")
storagelist <- list()
for(i in 1:length(output)){
sp_scores = data.frame(output[[i]]$specscores[grep("trt_", rownames(output[[i]]$specscores)),])
tomatch = c(4:10)
# sp_scores = sp_scores[grepl(paste(tomatch, collapse = "|"), rownames(sp_scores)),]
spectab = bind_cols(site = rep(unique(output[[i]]$siteinfo$site_code), nrow(sp_scores)),
trt = rownames(sp_scores),
sp_scores)
storagelist[[i]] = spectab %>% mutate(trt = gsub("_num", "", trt))
# %>%
# mutate(trt = gsub("_num).+", "", trt)) %>%
# mutate(trt = gsub("as.factor\\(", "", trt)) %>%
# group_by(site, trt) %>%
# summarise_all(mean)
}
specscores_full = data.frame(bind_rows(storagelist))
specscores_full[is.na(specscores_full)] = 0
write.csv(specscores_full, "../Data/specscores.csv")
# Normalization function -- squared sums of vector = 1
scalar1 <- function(x) {x / sqrt(sum(x^2))}
# Defining dot-product function
dotprod <- function(x, normalize = TRUE){
# First, select the appropriate treatment and remove columns that aren't plant response
N_vec <- x %>% filter(trt == "trt_N") %>% select(-trt, -site)
P_vec <- x %>% filter(trt == "trt_P") %>% select(-trt, -site)
K_vec <- x %>% filter(trt == "trt_K") %>% select(-trt, -site)
N_change <- sqrt(sum(N_vec^2))
P_change <- sqrt(sum(P_vec^2))
K_change <- sqrt(sum(K_vec^2))
# If normalizing, run the normalize function on each vector
if(normalize == TRUE){
N_vec <- scalar1(N_vec)
P_vec <- scalar1(P_vec)
K_vec <- scalar1(K_vec)
}
# Generate output dataframe of dot products (pracma::dot function)
output = data.frame(NP = pracma::dot(as.numeric(N_vec), as.numeric(P_vec)),
NK = pracma::dot(as.numeric(N_vec), as.numeric(K_vec)),
PK = pracma::dot(as.numeric(P_vec), as.numeric(K_vec)),
N_change = N_change,
P_change = P_change,
K_change = K_change)
return(output)
}
# Run over our dataset
dotoutput = specscores_full %>% group_by(site) %>%
do(dotprod(.))
# Load permANOVA p-value output
site_pvals = read.csv("../Data/composition_pvalues.csv", header = TRUE, stringsAsFactors = FALSE)
# Join all together (sites, treatments, dot-product pairs, perMANOVA p-values)
dot_full = left_join(site_pvals %>% select(-Total, -Residuals), dotoutput) %>%
select(-X) %>%
rename("trt_K" = "trt_K_num", "trt_P" =  "trt_P_num", "trt_N" = "trt_N_num")
# Write final data product
write.csv(x = dot_full, "../Data/dot_full.csv")
p1 = dot_full %>% # filter(trt_N < .05 & trt_P < .05) %>%
ggplot(aes(x = NP)) +
geom_histogram(fill = "white", color = "black") +
xlim(-1, 1) +
ggtitle("NP Correlation")
p2 = dot_full %>% # filter(trt_N < .05 & trt_K < .05) %>%
ggplot(aes(x = NK)) +
geom_histogram(fill = "white", color = "black") +
xlim(-1, 1) +
ggtitle("NK Correlation")
p3 = dot_full %>% # filter(trt_K < .05 & trt_P < .05) %>%
ggplot(aes(x = PK)) +
geom_histogram(fill = "white", color = "black") +
xlim(-1, 1) +
ggtitle("PK Correlation")
grid.arrange(p1,p2,p3,
top = textGrob("Site Response Correlations",gp=gpar(fontsize=20,font=3)),
nrow = 1)
p1 = dot_full %>% arrange(NP) %>%
ggplot(aes(x = c(1:nrow(dot_full)),y = NP,
fill = trt_P < 0.05 & trt_N < 0.05)) +
geom_bar(stat = "identity") +
geom_text(aes(label = site), angle = 90) +
ggtitle("NP Correlation")+
guides(fill = FALSE) +
xlab("Site")+
ylim(-1, 1.2)
p2 = dot_full %>% arrange(NK) %>%
ggplot(aes(x = c(1:nrow(dot_full)),y = NK,
fill = trt_K < 0.05 & trt_N < 0.05)) +
geom_bar(stat = "identity") +
geom_text(aes(label = site), angle = 90) +
ggtitle("NK Correlation")+
guides(fill = FALSE) +
xlab("Site") +
ylim(-1, 1.2)
p3 = dot_full %>% arrange(PK) %>%
ggplot(aes(x = c(1:nrow(dot_full)),y = PK,
fill = trt_P < 0.05 & trt_K < 0.05)) +
geom_bar(stat = "identity") +
geom_text(aes(label = site), angle = 90) +
ggtitle("PK Correlation") +
guides(fill = FALSE) +
xlab("Site")+
ylim(-1, 1.2)
grid.arrange(p1,p2,p3,
top = textGrob("Site Response Correlations Filled By Significance",gp=gpar(fontsize=20,font=3)),
nrow = 2)
capFit = function(site){
com.subset <- data.frame(cover.mat)[attr.mat$site_code == site,]
# Remove all zero columns
com.subset = com.subset[,colSums(com.subset) > 0]
# Pull out relevant plot attributes for each site
attr.subset <- data.frame(attr.mat) %>% filter(site_code == site)
# Check that these two matrices are the same size
expect_true(nrow(attr.subset) == nrow(com.subset))
# Generate and return an NMDS figure
mod_out = vegan::capscale(com.subset ~ as.factor(year_trt) + trt_K + trt_P + trt_N,
data = attr.subset)
return(mod_out)
}
par(mfrow = c(1, 3))
plot(capFit("koffler.ca"), main = "Koffler - Strong Negative N-P Correlation, value = -0.7")
plot(capFit("hopl.us"), main = "Hopland - No N-P Correlation, value = 0.1")
plot(capFit("konz.us"), main = "Konza - Strong Positive N-P Correlation, value = 0.9")
output[[1]]
output[[1]]$specscores
max(output[[1]]$specscores)
library(tidyverse);library(data.table);library(dtplyr)
ttable <- fread("../Data/tuningtable.csv")
library(tidyverse);library(data.table);library(dtplyr)
ttable <- fread("../Data/tuningtable.csv")
specscores_full <- read.csv("../Data/specscores.csv")
# taxonomy <- fread('C:/Users/ebatz/Dropbox/NutNet Data/Nutnet-site-taxonomy.csv',
#                stringsAsFactors = FALSE,
#                na.strings = c('NA','NULL'))
cover <- fread('C:/Users/ebatz/Dropbox/NutNet Data/full-cover-22-February-2019.csv')
taxonomy = cover %>% group_by(site_code, Taxon) %>%
summarise(ps_path = unique(ps_path),
local_lifespan = unique(local_lifespan),
functional_group = unique(functional_group),
N_fixer = unique(N_fixer))
cover
cover <- fread('C:/Users/ebatzer/Dropbox/NutNet Data/full-cover-22-February-2019.csv')
cover
library(tidyverse);library(data.table);library(dtplyr)
ttable <- fread("../Data/tuningtable.csv")
specscores_full <- read.csv("../Data/specscores.csv")
# taxonomy <- fread('C:/Users/ebatz/Dropbox/NutNet Data/Nutnet-site-taxonomy.csv',
#                stringsAsFactors = FALSE,
#                na.strings = c('NA','NULL'))
cover <- fread('C:/Users/ebatzer/Dropbox/NutNet Data/full-cover-22-February-2019.csv')
taxonomy = cover %>% group_by(site_code, Taxon) %>%
summarise(ps_path = unique(ps_path),
local_lifespan = unique(local_lifespan),
functional_group = unique(functional_group),
N_fixer = unique(N_fixer))
site.covars <- read.csv("../Data/site_covars.csv")
site_pvals = read.csv("composition_pvalues.csv", header = TRUE, stringsAsFactors = FALSE)
site_pvals = site_pvals %>% rename(site.K = trt_K_num, site.N = trt_N_num, site.P = trt_P_num)
dot_full = read.csv("../data/dot_full.csv")
specchars = left_join(ttable, taxonomy) %>%
mutate(Taxon = gsub("\\.", " ", Taxon))
specscores_long = specscores_full %>%
gather(key = "Taxon",
value = "coef",
-c(site, trt)) %>%
mutate(Taxon = gsub("\\.", " ", Taxon)) %>%
rename("site_code" = site)
full_responses = specscores_long %>% inner_join(specchars)
head(specscores_full)
max(specscores_full$CYNODON.DACTYLON)
specchars = left_join(ttable, taxonomy) %>%
mutate(Taxon = gsub("\\.", " ", Taxon))
specscores_long = specscores_full %>%
gather(key = "Taxon",
value = "coef",
-c(site, trt)) %>%
mutate(Taxon = gsub("\\.", " ", Taxon)) %>%
rename("site_code" = site)
full_responses = specscores_long %>% inner_join(specchars)
full_responses %>%
spread(key = trt, value = coef) %>%
ggplot(aes(x = trt_N, y = trt_P)) +
geom_point(aes(size = dominanceControl, color = functional_group), alpha = .4) +
stat_smooth(method = "lm", se = FALSE) +
ggtitle("All Responses")
full_responses %>%
spread(key = trt, value = coef) %>%
filter(site_code == dot_full$site[dot_full$NP == min(dot_full$NP)]) %>%
ggplot(aes(x = trt_N, y = trt_P)) +
geom_point(aes(size = dominanceControl, color = functional_group)) +
stat_smooth(method = "lm", se = FALSE) +
ggtitle("pinj.au")
cor(full_responses$coef[full_responses$site_code == "pinj.au" & full_responses$trt == "trt_N"],
full_responses$coef[full_responses$site_code == "pinj.au" & full_responses$trt == "trt_P"])
full_responses %>%
spread(key = trt, value = coef) %>%
filter(site_code == dot_full$site[dot_full$NP == median(dot_full$NP[-1])]) %>%
ggplot(aes(x = trt_N, y = trt_P)) +
geom_point(aes(size = dominanceControl, color = functional_group)) +
stat_smooth(method = "lm", se = FALSE) +
ggtitle("sage.us")
full_responses %>%
spread(key = trt, value = coef) %>%
filter(site_code == dot_full$site[dot_full$NP == max(dot_full$NP)]) %>%
ggplot(aes(x = trt_N, y = trt_P)) +
geom_point(aes(size = dominanceControl, color = functional_group)) +
stat_smooth(method = "lm", se = FALSE) +
ggtitle("konz.us")
full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .05) %>%
ggplot(aes(x = functional_group,
y = trt_P,
fill = functional_group)) +
geom_boxplot()
full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .05) %>%
ggplot(aes(x = functional_group,
y = trt_N,
fill = functional_group)) +
geom_boxplot()
full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .05) %>%
ggplot(aes(x = functional_group,
y = trt_K,
fill = functional_group)) +
geom_boxplot()
full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_P,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE)
full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_N,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE)
full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_K,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE)
formodels = full_responses %>%
spread(key = trt, value = coef) %>%
filter(functional_group %in% c("FORB", "GRAMINOID", "GRASS", "LEGUME"))
cat("Linear model of N-P relationship:\n")
summary(lm(trt_P ~ 0 + trt_N + functional_group, data = formodels))
cat("Linear model of N-K relationship:\n")
summary(lm(trt_K ~ 0 + trt_N + functional_group, data = formodels))
cat("Linear model of P-K relationship:\n")
summary(lm(trt_P ~ 0 + trt_K + functional_group, data = formodels))
capFit = function(site){
com.subset <- data.frame(cover.mat)[attr.mat$site_code == site,]
# Remove all zero columns
com.subset = com.subset[,colSums(com.subset) > 0]
# Pull out relevant plot attributes for each site
attr.subset <- data.frame(attr.mat) %>% filter(site_code == site)
# Check that these two matrices are the same size
expect_true(nrow(attr.subset) == nrow(com.subset))
# Generate and return an NMDS figure
mod_out = vegan::capscale(com.subset ~ as.factor(year_trt) + trt_K + trt_P + trt_N,
data = attr.subset)
return(mod_out)
}
par(mfrow = c(1, 3))
plot(capFit("pinj.au"), main = "Pinjarra - Strong Negative N-P Correlation, value = -0.7")
plot(capFit("hopl.us"), main = "Hopland - No N-P Correlation, value = 0.1")
plot(capFit("konz.us"), main = "Konza - Strong Positive N-P Correlation, value = 0.9")
p1 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_P,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE) +
ggtitle("N Resposne Coefficients")
p2 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_N,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE)+
ggtitle("P Resposne Coefficients")
p3 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_K,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE)+
ggtitle("K Response Coefficients")
grid.arrange(p1,p2,p3,
top = textGrob("Dominance-Response Relationships",gp=gpar(fontsize=20,font=3)),
nrow = 1)
p1 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_P,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE) +
ggtitle("N Resposne Coefficients")
p2 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_N,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE)+
ggtitle("P Resposne Coefficients")
p3 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_K,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE)+
ggtitle("K Response Coefficients")
grid.arrange(p1,p2,p3,
top = textGrob("Dominance-Response Relationships",gp=gpar(fontsize=20,font=3)),
nrow = 3)
p1 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_P,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE) +
ggtitle("N Resposne Coefficients")
p2 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_N,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE)+
ggtitle("P Resposne Coefficients")
p3 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_K,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE)+
ggtitle("K Response Coefficients")
grid.arrange(p1,p2,p3,
top = textGrob("Dominance-Response Relationships",gp=gpar(fontsize=20,font=3)),
nrow = 3)
p1 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_P,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE) +
ggtitle("N Resposne Coefficients")
p2 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_N,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE)+
ggtitle("P Resposne Coefficients")
p3 = full_responses %>%
spread(key = trt, value = coef) %>%
filter(dominanceControl > .25) %>%
ggplot(aes(x = dominanceControl,
y = trt_K,
color = functional_group)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, fullrange = TRUE)+
ggtitle("K Response Coefficients")
grid.arrange(p1,p2,p3,
top = textGrob("Dominance-Response Relationships",gp=gpar(fontsize=20,font=3)),
nrow = 3)
library(gridExtra)
b1 = function(x){return(5 * (1 - x)^5 + 5 * x * (1 - x)^4))}
b1 = function(x){return(5 * (1 - x)^5 + 5 * x * (1 - x)^4)}
b1(1)
b1(.2)
b1 = function(x){return((1 - x)^5 + 5 * x * (1 - x)^4)}
b1(.2)
b1(.1)
b1(.6)
b1(c(.1, .2, .3))
1 - b1(seq(.3, 1, by = .1))
seq(.3, 1, by = .1)
b1(1)
b1(seq(0, .3, by = .1))
b1(seq(.3, 1, by = .1))
b1(seq(0, .3, by = .1))
b1(seq(0, .3, by = .1))
1 - b1(seq(0, .3, by = .1))
b1(seq(.3, 1, by = .1))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
seq(.3, 1, by = .1)
1 - b1(seq(0, .3, by = .1))
b2 = function(x){return((x)^5 + 5 * x ^ 4 * (1 - x))}
b2(seq(.3, 1, by = .1))
1 - b2(seq(0, .3, by = .1))
b2(seq(0, .3, by = .1))
1 - b2(seq(.3, 1, by = .1))
b2(seq(0, .3, by = .1))
1 - b2(seq(0, .3, by = .1))
b2(seq(.3, 1, by = .1))
b2(seq(0, .3, by = .1))
1 - b2(seq(.3, 1, by = .1))
