geom_point(alpha = .4) +
guides(color = FALSE) +
stat_smooth(aes(color = FALSE), method = "lm", se = FALSE) +
geom_line(stat = "smooth",
method = "lm", se = FALSE, alpha = .2) +
ylim(1,4) +
xlim(1.5, 4.5) +
ggtitle("Spatial vs. Temporal Beta Diversity Relationship") +
xlab("Spatial Beta Diversity") +
ylab("Temporal Beta Diversity")
df1 = temp_div %>% rename("temp_alpha" = alpha_q0,
"temp_beta" = beta_q0,
"temp_gamma" = gamma_q0)
df2 = spat_div %>% rename("spat_alpha" = alpha_q0,
"spat_beta" = beta_q0,
"spat_gamma" = gamma_q0)
full_join(df1, df2) %>%
group_by(site_code, block) %>%
summarise(t_beta = mean(na.omit(temp_beta)),
s_beta = mean(na.omit(spat_beta))) %>%
ggplot(aes(y = t_beta,
x = s_beta,
color = site_code)) +
geom_point(alpha = .4) +
guides(color = FALSE) +
stat_smooth(aes(color = FALSE), method = "lm", se = FALSE) +
geom_line(stat = "smooth",
method = "lm", se = FALSE, alpha = .2) +
ylim(1,4) +
xlim(1.5, 4.5) +
ggtitle("Spatial vs. Temporal Beta Diversity Relationship") +
xlab("Spatial Beta Diversity") +
ylab("Temporal Beta Diversity")
summary(lm(t_beta ~ s_beta, data = full_join(df1, df2) %>%
group_by(site_code) %>%
summarise(t_beta = mean(na.omit(temp_beta)),
s_beta = mean(na.omit(spat_beta)))))
st_summary = full_join(df1, df2) %>%
group_by(site_code, block) %>%
summarise(t_beta = mean(na.omit(temp_beta)),
s_beta = mean(na.omit(spat_beta)))
ler(t_beta ~ s_beta + (1 + s_beta|site_code) + (1|block:site_code), data = st_summary)
lmer(t_beta ~ s_beta + (1 + s_beta|site_code) + (1|block:site_code), data = st_summary)
st_summary = full_join(df1, df2) %>%
group_by(site_code, block) %>%
summarise(t_beta = mean(na.omit(temp_beta)),
s_beta = mean(na.omit(spat_beta)))
lmer(t_beta ~ s_beta + (1 + s_beta|site_code) + (1|block:site_code), data = st_summary)
lmer(t_beta ~ s_beta + (1 + s_beta|site_code), data = st_summary)
lmer(t_beta ~ s_beta + (1 + s_beta|site_code), data = st_summary)
lmer(t_beta ~ s_beta + (1 + s_beta|site_code), data = st_summary, REML = FALSE)
summary(lmer(t_beta ~ s_beta + (1 + s_beta|site_code), data = st_summary, REML = FALSE))
library(lmerTest)
summary(lmer(t_beta ~ s_beta + (1 + s_beta|site_code), data = st_summary, REML = FALSE))
summary(lmer(t_beta ~ s_beta + (1|site_code), data = st_summary, REML = FALSE))
library(lmerTest)
summary(lmer(t_beta ~ s_beta + (1|site_code), data = st_summary, REML = FALSE))
summary(lm(t_beta ~ s_beta, data = st_summary))
summary(lm(t_beta ~ s_beta + site_code, data = st_summary))
summary(lm(t_beta ~ s_beta, data = st_summary))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.width = 8.5, fig.height = 5)
# Loading necessary packages
library(ggplot2) # Figure plotting
library(tidyverse) # Data manipulation
library(lme4) # Linear mixed effects models
library(vegan) # General ecology functions
library(data.table) # Fast reading of data tables
library(testthat) # Unit testing
library(dtplyr) # Data.table dplyr functions
library(JostDiv) # Exponentiated diversity indices (Hill Numbers)
library(gridExtra) # Multiple GGplots
library(corrplot) # Correlation plots
# Plot descriptions
plot.descriptions <- read.csv("../data/comb-by-plot-clim-soil-diversity-21-Feb-2019.csv",
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
# Soil data
soil.chars <- read.csv("../data/soil-nutrients-21-February-2019.csv",
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
# Annual climate data
climate <- read.csv(file = "../Data/Weather_annual_20190510.csv")
# Loading in dataset (Updated to Feb 22st 2019)
cover <- fread('../Data/full-cover-22-February-2019.csv',
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
# Spatial Diversity
spatdiv = read.csv("../Data/diversity_spatial_full.csv")
tempdiv = read.csv("../Data/diversity_temporal_full.csv")
# Defining % Annual Taxa
ann_cov <- cover %>%
filter(year_trt == 0 & live == 1) %>%
group_by(site_code) %>%
summarise(total_cover = sum(max_cover),
ann_cover = sum(max_cover[local_lifespan == "ANNUAL"])) %>%
mutate(ann_frac = ann_cover / total_cover) %>%
replace_na(list(ann_frac = 0))
# General site characteristics
site_summary <- plot.descriptions %>%
filter(year_trt == 0) %>%
select(site_code, elevation, managed, burned, grazed, anthropogenic, latitude, MAP_v2, MAT_v2) %>%
distinct()
# Joining together
site_summary = site_summary %>% inner_join(ann_cov %>% select(site_code, ann_frac))
# Plotting correlations
sitecor = cor(site_summary %>% select(-site_code) %>% na.omit())
corrplot(sitecor, method="circle")
# VIF Values
diag(solve(sitecor))
# Subsetting species matrix by these site codes
soil.chars = soil.chars %>%
filter(year_trt == 0) %>%
mutate(block = as.factor(block),
plot = as.factor(plot))
# Selecting parameters of interest
soil.stdized = soil.chars %>%
select(site_code, block, pct_N, pct_C, ppm_P, ppm_K) %>%
na.omit() %>%
group_by(site_code, block) %>%
summarise(mean_N = mean(pct_N),
mean_C = mean(pct_C),
mean_P = mean(ppm_P),
mean_K = mean(ppm_K),
sd_N = sd(pct_N),
sd_C = sd(pct_C),
sd_P = sd(ppm_P),
sd_K = sd(ppm_K)) %>%
mutate(cv_N = sd_N / mean_N,
cv_C = sd_C / mean_C,
cv_P = sd_P / mean_P,
cv_K = sd_K / mean_K) %>%
mutate_if(is.numeric, log) %>%
filter_all(any_vars(is.finite(.))) %>%
ungroup()
soil.stdized %>%
select(-block) %>%
gather(key = "var", value = "val", -site_code) %>%
ggplot(aes(x = val)) +
geom_histogram() +
facet_wrap(~var, scales = "free")
soil.stdized <- soil.stdized[!is.infinite(rowSums(soil.stdized %>% select(-site_code, -block))),]
soilcor = cor(soil.stdized %>% na.omit() %>% select(cv_N, cv_P, cv_C, cv_K,
mean_N, mean_P, mean_C, mean_K))
corrplot(soilcor, method="circle")
diag(solve(soilcor))
climate_summary = climate %>%
filter(year < 2019 &
ppt > 0 &
pet > 0) %>%
group_by(site_code) %>%
summarize(mean_PPT = mean(ppt),
mean_PET = mean(pet),
sd_PPT = sd(ppt),
sd_PET = sd(pet)) %>%
mutate(cv_PPT = sd_PPT / mean_PPT,
cv_PET = sd_PET / mean_PET)
climcor = cor(climate_summary %>% select(mean_PPT, mean_PET, cv_PPT, cv_PET))
corrplot(climcor, method="circle")
diag(solve(climcor))
full_table = inner_join(site_summary, soil.stdized %>% group_by(site_code) %>% summarise_if(is.numeric, mean)) %>%
left_join(climate_summary) %>%
select(-contains("sd"))
fullcor = cor(full_table %>% select(-site_code, -mean_PPT, -mean_PET, -cv_PPT, -cv_PET, -mean_C, -cv_C) %>% na.omit())
corrplot(fullcor, type = "upper")
sort(diag(solve(fullcor)))
# Function to calculate network-wide site z-scores
calc_zscores <- function(x){(x - mean(na.omit(x))) / sd(na.omit(x))}
# Z-scoring variation
soil.zscores = soil.stdized %>%
mutate_if(is.numeric, calc_zscores)
full_table = full_table %>%
mutate(managed = as.factor(managed),
burned = as.factor(burned),
grazed = as.factor(grazed),
anthropogenic = as.factor(anthropogenic))
spatial_model = spatdiv %>% group_by(site_code, block) %>%
#summarise(alpha = mean(alpha),
#          beta = mean(beta)) %>%
left_join(full_table  %>%
select(-mean_PPT, -mean_PET, -cv_PPT, -cv_PET, -mean_C, -cv_C) %>%
mutate_if(is.numeric, calc_zscores))
library(lmerTest)
mod_alpha = lmer(scale(alpha) ~ mean_N + mean_P + mean_K + MAT_v2 + MAP_v2 + (1|site_code/block), data = spatial_model)
mod_alpha
spatial_model
mod_alpha = lmer(scale(alpha_q0) ~ mean_N + mean_P + mean_K + MAT_v2 + MAP_v2 + (1|site_code/block), data = spatial_model)
anova(mod_alpha)
library(sjPlot)
# draw a dot-and-whisker plot
plot_model(mod_alpha, sort.est = TRUE)
plot_model(mod_beta, sort.est = TRUE)
mod_beta = lmer(scale(beta_q0) ~ mean_N + mean_P + mean_K + cv_N + cv_P + cv_K + (1|site_code/block), data = spatial_model)
plot_model(mod_beta, sort.est = TRUE)
# Plotting relative site resource availability
p1 = res_avail_abs %>% ggplot(aes(x = pct_N_mean)) +
geom_histogram(color = "black", fill = "lightblue") +
xlim(0, 1)+
ggtitle("Mean Site Soil %N")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.width = 5, fig.height = 3.5)
# Loading necessary packages
library(ggplot2) # Figure plotting
library(tidyverse) # Data manipulation
library(vegetarian) # Exponentiated diversity indices (Hill Numbers)
library(lme4) # Linear mixed effects models
library(vegan) # General ecology functions
library(data.table) # Fast reading of data tables
library(testthat) # Unit testing
library(plotly) # Interactive graphics
################################################################################
### Data preprocessing
################################################################################
# Loading in dataset (Updated to Feb 21st 2019)
cov.long <- fread('../data/full-cover-21-February-2019.csv',
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
plot.descriptions <- fread("../data/comb-by-plot-clim-soil-diversity-21-Feb-2019.csv",
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
soil.chars <- read.csv("../data/soil-nutrients-21-February-2019.csv",
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
biomass <- read.csv("../data/full-biomass-22-February-2019.csv")
# Choose identifying variables
ids <- c('site_code','year','year_trt', 'block','plot','trt')
# Subsetting species matrix by these site codes
soil.chars = soil.chars %>%
filter(year_trt == 0) %>%
mutate(block = as.factor(block),
plot = as.factor(plot))
# Selecting parameters of interest
soil.stdized = soil.chars %>%
select(site_code, block, plot, pct_N, pct_C, ppm_P, ppm_K) %>%
na.omit() %>%
mutate_if(is.numeric, log)
# Function to calculate network-wide site z-scores
calc_zscores <- function(x){(x - mean(na.omit(x))) / sd(na.omit(x))}
# Z-scoring variation
soil.zscores = soil.stdized %>%
mutate_if(is.numeric, calc_zscores)
pairs(soil.zscores %>%
select(pct_N, ppm_P, ppm_K))
solve(cor(soil.zscores %>%
select(pct_N, ppm_P, ppm_K)))
soil.zscores
# Selecting parameters of interest
soil.stdized = soil.chars %>%
select(site_code, block, plot, pct_N, pct_C, ppm_P, ppm_K) %>%
na.omit() %>%
# Log-transform prior to calculate total resource availability? Or wait?
mutate_if(is.numeric, log)
soil.stdized
solve(cor(soil.zscores %>%
select(pct_N, ppm_P, ppm_K)))
solve(cor(soil.zscores %>%
select(pct_N, ppm_P, ppm_K, pct_C)))
solve(cor(soil.zscores %>%
select(pct_N, ppm_P, ppm_K, pct_C)))
soil.zscores
# Plotting relative site resource availability
p1 = soil.zscores %>% ggplot(aes(x = pct_N)) +
geom_histogram(color = "black", fill = "lightblue") +
xlim(0, 1)+
ggtitle("Mean Site Soil %N")
p2 =  soil.zscores %>% ggplot(aes(x = ppm_P)) +
geom_histogram(color = "black", fill = "lightgreen") +
ggtitle("Mean Site Soil ppm P")
p3 = soil.zscores %>% ggplot(aes(x = ppm_K)) +
geom_histogram(color = "black", fill = "pink") +
ggtitle("Mean Site Soil ppm K")
gridExtra::grid.arrange(p1, p2, p3, nrow = 2)
gridExtra::grid.arrange(p1, p2, p3, p4, nrow = 2)
# Plotting relative site resource availability
p1 = soil.zscores %>% ggplot(aes(x = pct_N)) +
geom_histogram(color = "black", fill = "lightblue") +
xlim(0, 1)+
ggtitle("Mean Site Soil %N")
p2 =  soil.zscores %>% ggplot(aes(x = ppm_P)) +
geom_histogram(color = "black", fill = "lightgreen") +
ggtitle("Mean Site Soil ppm P")
p3 = soil.zscores %>% ggplot(aes(x = ppm_K)) +
geom_histogram(color = "black", fill = "pink") +
ggtitle("Mean Site Soil ppm K")
p4 = soil.zscores %>% ggplot(aes(x = pct_C)) +
geom_histogram(color = "black", fill = "orange") +
ggtitle("Mean Site Soil ppm K")
gridExtra::grid.arrange(p1, p2, p3, p4, nrow = 2)
# Plotting relative site resource availability
p1 = soil.zscores %>% ggplot(aes(x = pct_N)) +
geom_histogram(color = "black", fill = "lightblue") +
xlim(0, 1)+
ggtitle("Mean Site Soil %N")
p2 =  soil.zscores %>% ggplot(aes(x = ppm_P)) +
geom_histogram(color = "black", fill = "lightgreen") +
ggtitle("Mean Site Soil ppm P")
p3 = soil.zscores %>% ggplot(aes(x = ppm_K)) +
geom_histogram(color = "black", fill = "pink") +
ggtitle("Mean Site Soil ppm K")
p4 = soil.zscores %>% ggplot(aes(x = pct_C)) +
geom_histogram(color = "black", fill = "orange") +
ggtitle("Mean Site Soil ppm C")
gridExtra::grid.arrange(p1, p2, p3, p4, nrow = 2)
# Plotting relative site resource availability
p1 = soil.zscores %>% ggplot(aes(x = pct_N)) +
geom_histogram(color = "black", fill = "lightblue") +
xlim(0, 1)+
ggtitle("Mean Site Soil %N")
p2 =  soil.zscores %>% ggplot(aes(x = ppm_P)) +
geom_histogram(color = "black", fill = "lightgreen") +
ggtitle("Mean Site Soil ppm P")
p3 = soil.zscores %>% ggplot(aes(x = ppm_K)) +
geom_histogram(color = "black", fill = "pink") +
ggtitle("Mean Site Soil ppm K")
p4 = soil.zscores %>% ggplot(aes(x = pct_C)) +
geom_histogram(color = "black", fill = "orange") +
ggtitle("Mean Site Soil %C")
gridExtra::grid.arrange(p1, p2, p3, p4, nrow = 2)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.width = 5, fig.height = 3.5)
# Loading necessary packages
library(ggplot2) # Figure plotting
library(tidyverse) # Data manipulation
library(vegetarian) # Exponentiated diversity indices (Hill Numbers)
library(lme4) # Linear mixed effects models
library(vegan) # General ecology functions
library(data.table) # Fast reading of data tables
library(testthat) # Unit testing
library(plotly) # Interactive graphics
################################################################################
### Data preprocessing
################################################################################
# Loading in dataset (Updated to Feb 21st 2019)
cov.long <- fread('../data/full-cover-21-February-2019.csv',
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
plot.descriptions <- fread("../data/comb-by-plot-clim-soil-diversity-21-Feb-2019.csv",
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
soil.chars <- read.csv("../data/soil-nutrients-21-February-2019.csv",
stringsAsFactors = FALSE,
na.strings = c('NA','NULL'))
# Choose identifying variables
ids <- c('site_code','year','year_trt', 'block','plot','trt')
# Subsetting species matrix by these site codes
soil.chars = soil.chars %>%
filter(year_trt == 0) %>%
mutate(block = as.factor(block),
plot = as.factor(plot))
# Selecting parameters of interest
soil.stdized = soil.chars %>%
select(site_code, block, plot, pct_N, pct_C, ppm_P, ppm_K) %>%
na.omit() %>%
# Log-transform prior to calculate total resource availability? Or wait?
mutate_if(is.numeric, log)
# Function to calculate network-wide site z-scores
calc_zscores <- function(x){(x - mean(na.omit(x))) / sd(na.omit(x))}
# Z-scoring variation
soil.zscores = soil.stdized %>%
mutate_if(is.numeric, calc_zscores)
pairs(soil.zscores %>%
select(pct_N, ppm_P, ppm_K))
solve(cor(soil.zscores %>%
select(pct_N, ppm_P, ppm_K, pct_C)))
# Plotting relative site resource availability
p1 = soil.zscores %>% ggplot(aes(x = pct_N)) +
geom_histogram(color = "black", fill = "lightblue") +
xlim(0, 1)+
ggtitle("Mean Site Soil %N")
p2 =  soil.zscores %>% ggplot(aes(x = ppm_P)) +
geom_histogram(color = "black", fill = "lightgreen") +
ggtitle("Mean Site Soil ppm P")
p3 = soil.zscores %>% ggplot(aes(x = ppm_K)) +
geom_histogram(color = "black", fill = "pink") +
ggtitle("Mean Site Soil ppm K")
p4 = soil.zscores %>% ggplot(aes(x = pct_C)) +
geom_histogram(color = "black", fill = "orange") +
ggtitle("Mean Site Soil %C")
gridExtra::grid.arrange(p1, p2, p3, p4, nrow = 2)
# Stoichiometric ratio function (from Lewandosta et al. 2016)
stoichrat <- function(x){
xvec = as.numeric(x)
y = rep(1, length(xvec))
a = sum(xvec * y) / sqrt(sum(y))
r = sqrt(sum(xvec^2))
# "A" vector
avec = sum(xvec * y) / sqrt(sum(y)) * (y / sqrt(sum(y)))
names(avec) = c("a_N", "a_P", "a_K")
# "B" vector
bvec = c(xvec - avec)
names(bvec) = c("b_N", "b_P", "b_K")
b = sqrt(sum(bvec^2))
if(a >= 0){
theta = acos(a/r) * (180 / pi)
}else if(a < 0){
theta = 180 - acos(a/r) * (180 / pi)
}else{
error("There's a problem!")
}
output <- list(a, theta, r, b, avec, bvec)
names(output) = c("a", "theta", "r", "b", "avec", "bvec")
return(output)
}
# Relevant resources
resources = soil.zscores %>%
select(pct_N, ppm_P, ppm_K, pct_C)
# Stoichiometry output
stoichout = apply(resources, MARGIN = 1, FUN = stoichrat)
stoichtable = bind_cols(soil.zscores %>%
select(site_code, pct_N, ppm_P, ppm_K),
bind_rows(lapply(stoichout, `[`, c(1:4))))
avecs = data.frame(matrix(unlist(lapply(stoichout, `[`, c(5))), ncol = 3, byrow = TRUE))
names(avecs) = names(stoichout[[1]]$avec)
stoichtable
bind_cols(soil.zscores %>%
select(site_code, pct_N, ppm_P, ppm_K),
bind_rows(lapply(stoichout, `[`, c(1:4))))
avecs = data.frame(matrix(unlist(lapply(stoichout, `[`, c(5))), ncol = 3, byrow = TRUE))
names(avecs) = names(stoichout[[1]]$avec)
names(avecs)
stoichout[[1]]$avec
# Stoichiometric ratio function (from Lewandosta et al. 2016)
stoichrat <- function(x){
xvec = as.numeric(x)
y = rep(1, length(xvec))
a = sum(xvec * y) / sqrt(sum(y))
r = sqrt(sum(xvec^2))
# "A" vector
avec = sum(xvec * y) / sqrt(sum(y)) * (y / sqrt(sum(y)))
names(avec) = c("a_N", "a_P", "a_K", "a_C")
# "B" vector
bvec = c(xvec - avec)
names(bvec) = c("b_N", "b_P", "b_K", "a_C")
b = sqrt(sum(bvec^2))
if(a >= 0){
theta = acos(a/r) * (180 / pi)
}else if(a < 0){
theta = 180 - acos(a/r) * (180 / pi)
}else{
error("There's a problem!")
}
output <- list(a, theta, r, b, avec, bvec)
names(output) = c("a", "theta", "r", "b", "avec", "bvec")
return(output)
}
# Relevant resources
resources = soil.zscores %>%
select(pct_N, ppm_P, ppm_K, pct_C)
# Stoichiometry output
stoichout = apply(resources, MARGIN = 1, FUN = stoichrat)
stoichtable = bind_cols(soil.zscores %>%
select(site_code, pct_N, ppm_P, ppm_K),
bind_rows(lapply(stoichout, `[`, c(1:4))))
avecs = data.frame(matrix(unlist(lapply(stoichout, `[`, c(5))), ncol = 3, byrow = TRUE))
names(avecs) = names(stoichout[[1]]$avec)
stoichout[[1]]$avec
avecs = data.frame(matrix(unlist(lapply(stoichout, `[`, c(5))), ncol = 4, byrow = TRUE))
names(avecs) = names(stoichout[[1]]$avec)
bvecs = data.frame(matrix(unlist(lapply(stoichout, `[`, c(6))), ncol = 4, byrow = TRUE))
avecs
stoichtable
stoichtable = bind_cols(soil.zscores %>%
select(site_code, pct_N, ppm_P, ppm_K, pct_C),
bind_rows(lapply(stoichout, `[`, c(1:4))))
stoichtable
write.csv("../Data/stoichtable.csv", x = stoichtable)
hist(stoichtable$a)
qqnorm(stoichtable$a)
qqnorm(scale(stoichtable$a))
qqnorm(scale(stoichtable$a))
abline(b = 1)
qqnorm(scale(stoichtable$a))
abline(a = 1)
qqnorm(scale(stoichtable$a))
abline(a = 0, b = 1)
stoichtable %>% group_by(site_code, block) %>%
summarise(varsupply = sd(a))
stoichtable
stoichtable = bind_cols(soil.zscores %>%
select(site_code, block, plot, pct_N, ppm_P, ppm_K, pct_C),
bind_rows(lapply(stoichout, `[`, c(1:4))))
stoichtable %>% group_by(site_code, block) %>%
summarise(varsupply = sd(a))
stoichtable %>% group_by(site_code, block) %>%
summarise(varsupply = sd(a)) %>%
hist(varsupply)
stoichtable %>% group_by(site_code, block) %>%
summarise(varsupply = sd(a)) %>%
hist(.$varsupply)
stoichtable %>% group_by(site_code, block) %>%
summarise(varsupply = sd(a))
hist(na.omit(.$varsupply))
stoichtable %>% group_by(site_code, block) %>%
summarise(varsupply = sd(a)) %>%
hist(na.omit(.$varsupply))
stoichtable %>% group_by(site_code, block) %>%
summarise(varsupply = sd(a)) %>%
hist(na.omit(varsupply))
stoichsum = stoichtable %>% group_by(site_code, block) %>%
summarise(varsupply = sd(a),
meansupply = mean(a))
hist(stoichsum$varsupply)
hist(stoichsum$varsupply / stoichsum$meansupply)
hist(stoichsum$varsupply)
hist(sqrt(stoichsum$varsupply))
hist(log(stoichsum$varsupply))
qqnorm(log(stoichsum$varsupply))
qqnorm(sqrt(stoichsum$varsupply))
stoichsum = stoichtable %>% group_by(site_code, block) %>%
summarise(sdsupply = sd(a),
meansupply = mean(a))
hist(stoichsum$sdsupply)
